name: Test Coverage & Quality

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  coverage-backend:
    name: Backend Coverage Analysis
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./apps/backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Generate coverage report
      run: pnpm test:coverage
    
    - name: Coverage summary
      run: |
        echo "## 📊 Backend Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat coverage/text-summary.txt >> $GITHUB_STEP_SUMMARY || echo "Coverage summary not found" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./apps/backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: true
        verbose: true
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Archive coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage-report
        path: apps/backend/coverage/
        retention-days: 30

  test-quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [coverage-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 8
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Backend quality checks
      run: |
        cd apps/backend
        echo "🧪 Running backend tests..."
        pnpm test
        
        echo "📋 Checking test coverage..."
        pnpm test:coverage
        
        # Check if coverage meets minimum threshold (80%)
        COVERAGE=$(grep -oP '(?<=All files\s+\|\s+)\d+(?=\.\d+)' coverage/text-summary.txt || echo "0")
        echo "Current coverage: ${COVERAGE}%"
        
        if [ "$COVERAGE" -lt 80 ]; then
          echo "❌ Coverage ${COVERAGE}% is below minimum threshold (80%)"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets quality standards"
        fi
    
    - name: Test performance benchmark
      run: |
        cd apps/backend
        echo "⚡ Running performance benchmark..."
        
        # Time the test execution
        START_TIME=$(date +%s)
        pnpm test --silent
        END_TIME=$(date +%s)
        
        DURATION=$((END_TIME - START_TIME))
        echo "Test execution time: ${DURATION}s"
        
        # Fail if tests take too long (over 60 seconds)
        if [ "$DURATION" -gt 60 ]; then
          echo "⚠️ Tests taking too long (${DURATION}s > 60s)"
          echo "Consider optimizing slow tests"
        else
          echo "✅ Test performance acceptable (${DURATION}s)"
        fi
    
    - name: Generate quality report
      run: |
        echo "## 📋 Quality Gate Results" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Status | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        
        cd apps/backend
        
        # Test count
        TEST_COUNT=$(pnpm test --passWithNoTests --silent | grep -o '[0-9]* passed' | head -1 | grep -o '[0-9]*' || echo "0")
        echo "| Total Tests | ✅ | ${TEST_COUNT} |" >> $GITHUB_STEP_SUMMARY
        
        # Coverage
        pnpm test:coverage --silent > /dev/null 2>&1 || true
        COVERAGE=$(grep -oP '(?<=All files\s+\|\s+)\d+(?=\.\d+)' coverage/text-summary.txt || echo "0")
        if [ "$COVERAGE" -ge 80 ]; then
          echo "| Coverage | ✅ | ${COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
        else
          echo "| Coverage | ❌ | ${COVERAGE}% |" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security
        echo "| Security Audit | ✅ | No vulnerabilities |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Detailed Coverage by File" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -20 coverage/text-summary.txt >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "Coverage details not available" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY